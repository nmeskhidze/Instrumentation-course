<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Footprint Diagram</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .controls {
            display: flex;
            gap: 30px;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        label {
            font-weight: bold;
            color: #333;
        }
        input[type="range"] {
            width: 150px;
            margin: 5px 0;
        }
        .value-display {
            font-size: 14px;
            color: #666;
        }
        #canvas {
            border: 2px solid #ddd;
            border-radius: 5px;
            background: linear-gradient(to bottom, #e3f2fd 0%, #f5f5f5 100%);
        }
        .info {
            margin-top: 15px;
            padding: 15px;
            background: #e8f5e8;
            border-radius: 5px;
            font-size: 14px;
        }
        .legend {
            display: flex;
            gap: 20px;
            margin-top: 10px;
            font-size: 12px;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .legend-color {
            width: 15px;
            height: 15px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Interactive Sensor Footprint Diagram</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="height">Sensor Height (m)</label>
                <input type="range" id="height" min="1" max="50" value="10" step="1">
                <div class="value-display" id="heightValue">10 m</div>
            </div>
            
            <div class="control-group">
                <label for="stability">Atmospheric Stability</label>
                <input type="range" id="stability" min="1" max="6" value="3" step="1">
                <div class="value-display" id="stabilityValue">Neutral</div>
            </div>
            
            <div class="control-group">
                <label for="windSpeed">Wind Speed (m/s)</label>
                <input type="range" id="windSpeed" min="1" max="15" value="5" step="1">
                <div class="value-display" id="windSpeedValue">5 m/s</div>
            </div>
        </div>
        
        <canvas id="canvas" width="900" height="500"></canvas>
        
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background: rgba(255, 0, 0, 0.3);"></div>
                <span>High Contribution (90%)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgba(255, 100, 0, 0.3);"></div>
                <span>Medium Contribution (70%)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgba(255, 200, 0, 0.3);"></div>
                <span>Low Contribution (50%)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #333;"></div>
                <span>Sensor Tower</span>
            </div>
        </div>
        
        <div class="info">
            <strong>Footprint Information:</strong>
            <div id="footprintInfo">
                Peak contribution distance: <span id="peakDistance">--</span> m<br>
                90% footprint extent: <span id="footprintExtent">--</span> m<br>
                Atmospheric condition: <span id="atmCondition">--</span>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        const stabilityClasses = {
            1: { name: "Very Unstable", factor: 0.5, color: "A" },
            2: { name: "Unstable", factor: 0.7, color: "B" },
            3: { name: "Neutral", factor: 1.0, color: "D" },
            4: { name: "Stable", factor: 1.3, color: "E" },
            5: { name: "Very Stable", factor: 1.6, color: "F" },
            6: { name: "Extremely Stable", factor: 2.0, color: "G" }
        };
        
        function updateDisplay() {
            const height = parseInt(document.getElementById('height').value);
            const stability = parseInt(document.getElementById('stability').value);
            const windSpeed = parseInt(document.getElementById('windSpeed').value);
            
            document.getElementById('heightValue').textContent = height + ' m';
            document.getElementById('stabilityValue').textContent = stabilityClasses[stability].name;
            document.getElementById('windSpeedValue').textContent = windSpeed + ' m/s';
            
            drawFootprint(height, stability, windSpeed);
        }
        
        function calculateFootprint(x, height, stability, windSpeed) {
            const stabilityFactor = stabilityClasses[stability].factor;
            
            // Simplified footprint model based on Kormann & Meixner (2001)
            const zu = height;  // measurement height
            const L = 1000 * stabilityFactor;  // Monin-Obukhov length (simplified)
            
            // Crosswind integrated footprint function
            const D = 1.0;  // diffusivity parameter
            const P = 1.0;  // dimensionless parameter
            
            if (x <= 0) return 0;
            
            const xi = x / zu;
            const footprint = (1 / (zu * windSpeed)) * 
                             Math.pow(xi, -0.8) * 
                             Math.exp(-0.8 / xi) * 
                             (1 / stabilityFactor);
            
            return Math.max(0, footprint * 1000); // scaling factor for visualization
        }
        
        function drawFootprint(height, stability, windSpeed) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            const scale = 2; // meters per pixel
            const originX = 100;
            const originY = canvas.height - 50;
            const maxDistance = (canvas.width - originX) * scale;
            
            // Calculate footprint values
            const footprintData = [];
            let maxFootprint = 0;
            let peakDistance = 0;
            let peakValue = 0;
            
            for (let x = 1; x <= maxDistance; x += scale) {
                const value = calculateFootprint(x, height, stability, windSpeed);
                footprintData.push({ x, value });
                
                if (value > maxFootprint) {
                    maxFootprint = value;
                    peakDistance = x;
                    peakValue = value;
                }
            }
            
            // Draw ground
            ctx.fillStyle = '#8d6e63';
            ctx.fillRect(0, originY, canvas.width, canvas.height - originY);
            
            // Draw grid
            ctx.strokeStyle = '#ddd';
            ctx.lineWidth = 1;
            for (let i = 0; i <= maxDistance; i += 50) {
                const x = originX + i / scale;
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
                
                if (i % 100 === 0) {
                    ctx.fillStyle = '#666';
                    ctx.font = '10px Arial';
                    ctx.fillText(i + 'm', x - 10, canvas.height - 5);
                }
            }
            
            // Draw footprint contours
            const contours = [0.9, 0.7, 0.5]; // 90%, 70%, 50% contribution
            const colors = [
                'rgba(255, 0, 0, 0.3)',
                'rgba(255, 100, 0, 0.3)', 
                'rgba(255, 200, 0, 0.3)'
            ];
            
            contours.forEach((threshold, index) => {
                ctx.fillStyle = colors[index];
                ctx.beginPath();
                
                const thresholdValue = maxFootprint * threshold;
                let inContour = false;
                
                for (let i = 0; i < footprintData.length; i++) {
                    const point = footprintData[i];
                    const x = originX + point.x / scale;
                    const isAboveThreshold = point.value >= thresholdValue;
                    
                    if (isAboveThreshold && !inContour) {
                        ctx.moveTo(x, originY);
                        inContour = true;
                    }
                    
                    if (isAboveThreshold) {
                        const y = originY - (point.value / maxFootprint) * 150;
                        ctx.lineTo(x, y);
                    } else if (inContour) {
                        ctx.lineTo(x, originY);
                        inContour = false;
                    }
                }
                
                if (inContour) {
                    ctx.lineTo(originX + maxDistance / scale, originY);
                }
                
                ctx.closePath();
                ctx.fill();
            });
            
            // Draw footprint curve
            ctx.strokeStyle = '#d32f2f';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            for (let i = 0; i < footprintData.length; i++) {
                const point = footprintData[i];
                const x = originX + point.x / scale;
                const y = originY - (point.value / maxFootprint) * 150;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.stroke();
            
            // Draw sensor tower
            const towerX = originX;
            const towerHeight = height * 2; // visual scaling
            
            ctx.fillStyle = '#333';
            ctx.fillRect(towerX - 3, originY - towerHeight, 6, towerHeight);
            
            // Tower structure
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 1;
            for (let i = 0; i < towerHeight; i += 20) {
                ctx.beginPath();
                ctx.moveTo(towerX - 8, originY - i);
                ctx.lineTo(towerX + 8, originY - i);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(towerX - 8, originY - i);
                ctx.lineTo(towerX - 3, originY - i - 10);
                ctx.moveTo(towerX + 8, originY - i);
                ctx.lineTo(towerX + 3, originY - i - 10);
                ctx.stroke();
            }
            
            // Sensor
            ctx.fillStyle = '#ff5722';
            ctx.beginPath();
            ctx.arc(towerX, originY - towerHeight, 8, 0, 2 * Math.PI);
            ctx.fill();
            
            // Wind arrow
            ctx.strokeStyle = '#2196f3';
            ctx.lineWidth = 3;
            const arrowY = 50;
            const arrowLength = windSpeed * 10;
            ctx.beginPath();
            ctx.moveTo(50, arrowY);
            ctx.lineTo(50 + arrowLength, arrowY);
            // Arrow head
            ctx.lineTo(45 + arrowLength, arrowY - 5);
            ctx.moveTo(50 + arrowLength, arrowY);
            ctx.lineTo(45 + arrowLength, arrowY + 5);
            ctx.stroke();
            
            ctx.fillStyle = '#2196f3';
            ctx.font = '12px Arial';
            ctx.fillText('Wind', 50, arrowY + 20);
            
            // Update info
            const footprint90 = footprintData.findIndex(p => p.value >= maxFootprint * 0.1);
            const extent = footprint90 > 0 ? footprintData[footprint90].x : maxDistance;
            
            document.getElementById('peakDistance').textContent = Math.round(peakDistance);
            document.getElementById('footprintExtent').textContent = Math.round(extent);
            document.getElementById('atmCondition').textContent = stabilityClasses[stability].name;
        }
        
        // Event listeners
        document.getElementById('height').addEventListener('input', updateDisplay);
        document.getElementById('stability').addEventListener('input', updateDisplay);
        document.getElementById('windSpeed').addEventListener('input', updateDisplay);
        
        // Initial draw
        updateDisplay();
    </script>
</body>
</html>
